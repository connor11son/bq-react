# -*- mode: sh -*-
# Combined server and engine file
# to be placed in /etc/nginx/sites-{available,enabled}

# Serve static content with NGINX
# Don't forget to use bq-admin deploy public to
# You must EDIT and remove #EDIT before starting Nginx
####################################
# Redirect HTTP reques to HTTPS
#server {
# listen         [::]:80;
# return 301 https://$host$request_uri;
#}


#upstream image_servers {
#   server n0001:9059;
#   server n0002:9059;
#}

upstream bisque_servers {
    #server bisquesvc:3031;
    server unix:///tmp/bisque.sock;
}

upstream engine_servers {
    #server bisquesvc:4041;
    server unix:///tmp/engine.sock;
}

#####################################
# Bisque MAIN server
server {
    #charset utf-8;
    # Set the port of main bisque  server
    listen       80;
    listen       81 proxy_protocol;
    listen       82 http2 proxy_protocol;
    root         /source/public;

    # Enable SSL
    # http://biodev.ece.ucsb.edu/projects/bisquik/wiki/Installation/NginxInstall#HTTPS
    #ssl on;
    #ssl_certificate /etc/ssl/localcerts/nginx.crt;
    #ssl_certificate_key /etc/ssl/localcerts/nginx.key;

    location = /favicon.ico { return 204;}
    location = /robots.txt  { return 200 "User-agent: *\nDisallow: /\n"; }

    # Filter static files (in root) and serve directly
    location ~* ^.+\.(jpg|jpeg|gif|png|ico|css|zip|tgz|gz|rar|bz2|pdf|txt|tar|wav|bmp|rtf|js|flv|swf|html|htm|svg)$ {
        try_files $uri  @bisque;
        expires 7d;
        access_log off;
        #log_not_found off;
    }


#    # Use NGinx Uploader module (handles file transfers). OPTIONAL comment out this section if troublesome.
#    # http://www.grid.net.ru/nginx/upload.en.html
    # location /import/transfer {
    #     # Store files in this directory
    #     upload_store /var/nginx/store;
    #     upload_store_access user:rw group:rw all:rw;
    #     # Set specified fields in request body
    #     # this puts the original filename, new path+filename and content type in the requests params
    #     upload_set_form_field $upload_field_name.uploaded "<resource name='$upload_file_name' value='file://$upload_tmp_path'/>";
    #     upload_pass_form_field "^.*_resource$";
    #     #upload_cleanup 400 404 499 500-505;
    #     upload_pass @bisque;
    #     upload_max_part_header_len 2048;
    # }

    location ~ ^/import/transfer.*$ {
	#auth_request               /upload/authenticate;

	client_body_temp_path      /tmp/nginx;
	client_body_in_file_only   on;
	client_body_buffer_size    16M;
	#client_max_body_size       0;
	client_max_body_size       1000000m; # 1TB?

	uwsgi_pass_request_headers on;

	include  uwsgi_params;
	uwsgi_param                HTTP_X_FILE $request_body_file;
	uwsgi_param                CONTENT_LENGTH 0;
	uwsgi_param                HTTP_CONTENT_LENGTH 0;
	uwsgi_param                PATH_INFO /import/transfer_x_file;
    #uwsgi_read_timeout 20m;
    #uwsgi_send_timeout 20m;
    uwsgi_read_timeout 5d;
    uwsgi_send_timeout 5d;
        uwsgi_ignore_client_abort  on;
	uwsgi_pass_request_body    off;
	uwsgi_pass                 bisque_servers;
	}


   # Sending stuff to other servers
#    location /image_service {
#        try_files $uri @bisque_multi;
#    }
#    location /features {
#        try_files $uri @bisque_multi;
#    }

    # Default try to server then send to bisque
    location / {
      try_files $uri  @bisque;
    }


    # Bisque is behind Uwsgi
    location @bisque {
        #uwsgi_param     UWSGI_FASTROUTER_KEY    bisque;
        include uwsgi_params;
        uwsgi_param SCRIPT_NAME "";
	    uwsgi_param FRONTEND "nginx";
        uwsgi_read_timeout 5d;
        uwsgi_send_timeout 5d;
        uwsgi_buffering off;
        uwsgi_pass bisque_servers;
        
        # CORS settings
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, X-Requested-With, Origin, Accept' always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;
        
        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, X-Requested-With, Origin, Accept' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain charset=UTF-8';
            add_header 'Content-Length' 0;
            return 204;
        }
    }

    #error_page   500 502 503 504  /50x.html;
    #location = /50x.html {
    #    root   html;
    #}
}

###########################################
# ENGINE Configuration (remove or comment if not used)
server {
#     Engine PORT address
    listen       27000;
    root         /source/public;
    charset utf-8;
    location / {
        uwsgi_pass engine_servers;
        #uwsgi_pass unix:///tmp/engine.sock;
        include uwsgi_params;
        uwsgi_param SCRIPT_NAME "";
        uwsgi_read_timeout 20m;
        uwsgi_send_timeout 20m;
        uwsgi_buffering off;
    }

    #error_log /var/log/nginx/engine-error debug;
    #error_page   500 502 503 504  /50x.html;
    #location = /50x.html {
    #    root   html;
    #}
}
